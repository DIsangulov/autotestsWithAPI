stages:
  - test
  - test_it
  - history_copy
  - reports
  - deploy


run_tests_api:
  image: registry.ngrsoftlab.ru:8888/ngr-chrome:v2
  stage: test

  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - when: always

  before_script:
    - pip install -r requirements.txt

  script:
    - pytest -v -s --alluredir=./allure-results tests/test_api.py -p no:warnings

  allow_failure: true

  artifacts: # Сущность, с помощью которой, мы сохраним результат тестирования.
    when: always
    paths:
      - ./allure-results # Здесь будет сохранен отчет
    expire_in: 1 day # Да, он будет удален через день. Нет смысла хранить его в течение длительного срока.


run_tests_ui:
  image: registry.ngrsoftlab.ru:8888/ngr-chrome:v2
  stage: test

  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - when: always

  before_script:
    - pip install -r requirements.txt

  script:
    - pytest --alluredir=./allure-results tests/test_ui.py

  allow_failure: true

  artifacts: # Сущность, с помощью которой, мы сохраним результат тестирования.
    when: always
    paths:
      - ./allure-results # Здесь будет сохранен отчет
    expire_in: 1 day


test_it_api:
  image: registry.ngrsoftlab.ru:8888/ngr-chrome:v2
  stage: test_it

  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: always
    - when: never

  before_script:
    - pip install -r requirements.txt

  script:
    - pytest --testit -v -s
    #- pytest --testit --testrunid=${TEST_RUN_ID} --testit_url=${URL} --privatetoken=${PRIVATE_TOKEN} --configurationid=5aa0c7a7-4d2d-4547-aff3-3af8d0048fa2

  allow_failure: true


test_it_ui:
  image: registry.ngrsoftlab.ru:8888/ngr-chrome:v2
  stage: test_it

  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: always
    - when: never

  before_script:
    - pip install -r requirements.txt

  script:
    - pytest --testit

  allow_failure: true


history_job:
  stage: history_copy

  image: registry.ngrsoftlab.ru:8888/storytel

  script:
    - 'curl --location --output artifacts.zip --header "PRIVATE-TOKEN: $TOKEN" "https://gitlab.ngrsoftlab.ru/api/v4/projects/$CI_PROJECT_ID/jobs/artifacts/$CI_COMMIT_REF_NAME/download?job=pages"' # Новый метод скачивания архива
    - apk add unzip # Образ, используемый в этом шаге по умолчанию не имеет утилиты unzip, по этой причине мы добавляем её в контейнер
    - unzip artifacts.zip # Распаковываем файлы
    - chmod -R 777 public # Даем права любые манипуляции с содержимым
    - cp -r ./public/history ./allure-results # Копируем историю в папку с результатами теста

  allow_failure: true # Так как при первом запуске пайплайна истории нет, это позволит нам избежать падения пайплайна. В дальнейшем эту строчку можно спокойно удалить.

  artifacts:
    paths:
      - ./allure-results # Сохраняем данные
    expire_in: 1 day
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - when: always


allure_job:
  stage: reports

  #image: frankescobar/allure-docker-service # Указываем раннеру использовать образ с allure. В нем мы будем генерировать отчет.
  image: registry.ngrsoftlab.ru:8888/frankescobar

  script:
    - allure generate -c ./allure-results -o ./allure-report # Генерируем отчет из ./allure-results внутрь папки ./allure-report

  artifacts:
    paths:
      - ./allure-results # Примонтируем две этих директории для получения результатов тестирования и генерации отчетов соответственно
      - ./allure-report
    expire_in: 1 day
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - when: always


pages:
    stage: deploy
    script:
      - mkdir public # Создаем папку public. По умолчанию гитлаб хостит в gitlab pages только из папки public
      - mv ./allure-report/* public # Перемещаем в папку public сгенерированный отчет.
    artifacts:
      paths:
        - public
    rules:
      - if: $CI_PIPELINE_SOURCE == "trigger"
        when: never
      - when: always