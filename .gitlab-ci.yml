stages:          # List of stages for jobs, and their order of execution
  - test
  - reports
  - deploy

run_tests:
    #image: python:3.11.0
    image: registry.ngrsoftlab.ru:8888/python:3.10.5
    stage: test

    before_script:
        - pip install -r requirements.txt

    script:
        - pytest -v -s --alluredir=./allure-results tests/test_api.py

    allow_failure: true

        #- pytest --testit --testrunid=${TEST_RUN_ID} --testit_url=${URL} --privatetoken=${PRIVATE_TOKEN} --configurationid=5aa0c7a7-4d2d-4547-aff3-3af8d0048fa2

    artifacts: # Сущность, с помощью которой, мы сохраним результат тестирования.
      when: always # Сохранять всегда
      paths:
      - ./allure-results # Здесь будет сохранен отчет
      expire_in: 1 day # Да, он будет удален через день. Нет смысла хранить его в течение длительного срока.

allure_job: # Название job
   stage: reports

   image: frankescobar/allure-docker-service # Указываем раннеру использовать образ с allure. В нем мы будем генерировать отчет.

   script:
     - allure generate -c ./allure-results -o ./allure-report # Генерируем отчет из ./allure-results внутрь папки ./allure-report

   artifacts:
     paths:
      - ./allure-results # Примонтируем две этих директории для получения результатов тестирования и генерации отчетов соответственно
      - ./allure-report
     expire_in: 1 day
   rules:
     - when: always

pages: # Названием этой job говорим гитлабу, чтобы захостил результат у себя в pages
    stage: deploy # третий stage, который будет выполнен
    script:
      - mkdir public # Создаем папку public. По умолчанию гитлаб хостит в gitlab pages только из папки public
      - mv ./allure-report/* public # Перемещаем в папку public сгенерированный отчет.
    artifacts:
      paths:
        - public
    rules:
      - when: always