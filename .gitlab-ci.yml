stages:          # List of stages for jobs, and their order of execution
  - test
  - history_copy
  - reports
  - deploy

run_tests:
    #image: python:3.11.0
  #image: registry.ngrsoftlab.ru:8888/python:3.10.5
  image: joyzoursky/python-chromedriver
  stage: test

  before_script:
    - pip install -r requirements.txt
    #    - docker run -it -p:5555:5555 retreatguru/headless-chromedriver
    #    - curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
    #    - chmod +x /usr/local/bin/docker-compose
    #    - ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    # - docker-compose -f docker-compose.yml up &  # поднимаем хром

  script:
    #- pytest -v -s --alluredir=./allure-results tests/test_api.py -p no:warnings
    - pytest -v -s --alluredir=./allure-results tests/test_ui.py
  #
  #  after_script:
  #    - docker-compose -f docker-compose.yml down # тушим хром

  allow_failure: true

  #- pytest --testit --testrunid=${TEST_RUN_ID} --testit_url=${URL} --privatetoken=${PRIVATE_TOKEN} --configurationid=5aa0c7a7-4d2d-4547-aff3-3af8d0048fa2

  artifacts: # Сущность, с помощью которой, мы сохраним результат тестирования.
    when: always # Сохранять всегда
    paths:
      - ./allure-results # Здесь будет сохранен отчет
    expire_in: 1 day # Да, он будет удален через день. Нет смысла хранить его в течение длительного срока.


history_job: # Название job
  stage: history_copy # Это второй stage, который нужно выполнить

  #image: storytel/alpine-bash-curl # Но теперь укажем раннеру использовать другой образ, для того чтобы скачать результаты теста из предыдущего пайплайна. Нам же нужна история тестов, верно?
  image: registry:ngrsoftlab:ru:8888/storytel

  script:
    - curl --location --output artifacts.zip "https://gitlab.ngrsoftlab.ru/api/v4/projects/193/jobs/artifacts/master/download?job=pages&job_token=$CI_JOB_TOKEN"  # С помощью api гитлаба скачиваем файлы из job, который будет указан ниже.
    - apk add unzip # Образ, используемый в этом шаге по умолчанию не имеет утилиты unzip, по этой причине мы добавляем её в контейнер
    - unzip artifacts.zip # Распаковываем файлы
    - chmod -R 777 public # Даем права любые манипуляции с содержимым
    - cp -r ./public/history ./allure-results # Копируем историю в папку с результатами теста

  allow_failure: true # Так как при первом запуске пайплайна истории нет, это позволит нам избежать падения пайплайна. В дальнейшем эту строчку можно спокойно удалить.

  artifacts:
    paths:
      - ./allure-results # Сохраняем данные
    expire_in: 1 day
  rules:
    - when: always # Сохранять всегда


allure_job: # Название job
  stage: reports

  #image: frankescobar/allure-docker-service # Указываем раннеру использовать образ с allure. В нем мы будем генерировать отчет.
  image: registry.ngrsoftlab.ru:8888/frankescobar

  script:
    - allure generate -c ./allure-results -o ./allure-report # Генерируем отчет из ./allure-results внутрь папки ./allure-report

  artifacts:
    paths:
      - ./allure-results # Примонтируем две этих директории для получения результатов тестирования и генерации отчетов соответственно
      - ./allure-report
    expire_in: 1 day
  rules:
    - when: always

pages: # Названием этой job говорим гитлабу, чтобы захостил результат у себя в pages
    stage: deploy # третий stage, который будет выполнен
    script:
      - mkdir public # Создаем папку public. По умолчанию гитлаб хостит в gitlab pages только из папки public
      - mv ./allure-report/* public # Перемещаем в папку public сгенерированный отчет.
    artifacts:
      paths:
        - public
    rules:
      - when: always